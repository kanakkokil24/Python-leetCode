693. Binary Number with Alternating Bits

Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.

 

Example 1:

Input: n = 5
Output: true
Explanation: The binary representation of 5 is: 101
Example 2:

Input: n = 7
Output: false
Explanation: The binary representation of 7 is: 111.
Example 3:

Input: n = 11
Output: false
Explanation: The binary representation of 11 is: 1011.


Soultion 

class Solution:
    def hasAlternatingBits(self, n: int) -> bool:
        n = bin(n)[2:]
        #print(n)
        count = 0
        for x in n:
            if x is '1':
                count = count+1
            else:
                count = count -1
            if count > 1 or count < 0:
                return(False)
        return(True)