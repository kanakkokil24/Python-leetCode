408. Valid Word Abbreviation

A string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.

For example, a string such as "substitution" could be abbreviated as (but not limited to):

"s10n" ("s ubstitutio n")
"sub4u4" ("sub stit u tion")
"12" ("substitution")
"su3i1u2on" ("su bst i t u ti on")
"substitution" (no substrings replaced)
The following are not valid abbreviations:

"s55n" ("s ubsti tutio n", the replaced substrings are adjacent)
"s010n" (has leading zeros)
"s0ubstitution" (replaces an empty substring)
Given a string word and an abbreviation abbr, return whether the string matches the given abbreviation.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:

Input: word = "internationalization", abbr = "i12iz4n"
Output: true
Explanation: The word "internationalization" can be abbreviated as "i12iz4n" ("i nternational iz atio n").
Example 2:

Input: word = "apple", abbr = "a2e"
Output: false
Explanation: The word "apple" cannot be abbreviated as "a2e".


Solution 


class Solution:
    def validWordAbbreviation(self, word: str, abbr: str) -> bool:
        stack = []
        i = 0
        temp = ''
        while i < len(abbr):
            if abbr[i].isalpha():
                stack.append(abbr[i])
                temp = ''
            elif temp=='' and abbr[i]=='0':
                return(False)
            elif abbr[i].isdigit():
                temp = temp+abbr[i]
                if i < (len(abbr)-1) and not abbr[i+1].isdigit():
                    stack.append(temp)
                elif i == (len(abbr)-1):
                    stack.append(temp)
            i = i+1
        j =0
        temp =''
        i =0
        while i < len(stack):
            if stack[i].isalpha():
                temp = temp+stack[i]
                j = j+1
                i = i+1
            elif stack[i].isdigit():
                if (len(word[j:j+int(stack[i])])) == (int(stack[i])):
                    temp = temp+word[j:j+int(stack[i])]
                    j = j+int(stack[i])
                    i = i+1
                else:
                    return(False)
                    
        if temp == word:
            return(True)
        else:
            return(False)