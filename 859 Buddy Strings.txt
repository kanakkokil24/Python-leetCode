859. Buddy Strings

Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

For example, swapping at indices 0 and 2 in "abcd" results in "cbad".
 

Example 1:

Input: s = "ab", goal = "ba"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.


Solution 

class Solution:
    def buddyStrings(self, s: str, goal: str) -> bool:
        rec = set()
        swap_A = []
        swap_B = []
        count = 0
        if len(s) != len(goal):
            return(False)
        for x,y in zip(s,goal):
            rec.add(x)
            if x!=y:
                swap_A.append(x)
                swap_B.append(y)
                count = count+1
            if count > 2:
                return(False)
        if count == 0:
            return(len(rec) != len(s))
        elif count != 2:
            return(False)
        else:
            return(swap_A[::-1]==swap_B)

            