451. Sort Characters By Frequency

Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

Solution

class Solution:
    def frequencySort(self, s: str) -> str:
        l =set(s)
        from collections import defaultdict
        dict1 = defaultdict(list)
        for x in l:
            dict1[s.count(x)].append(x)
        #print(dict1)
        y = sorted(dict1,reverse=True)
        #print(y)
        res = ''
        for x in y:
            val = sorted(dict1.get(x))
            #print(val)
            for m in val:
                res = res+''.join(m*x)
        return(res)
