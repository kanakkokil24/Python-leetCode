1128. Number of Equivalent Domino Pairs

Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.

Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].

 

Example 1:

Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1
Example 2:

Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]
Output: 3

Solution

class Solution:
    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        h = {}
        result = 0
        for domino in dominoes:
            s = tuple(sorted(domino))
            h[s] = h.get(s, 0) + 1
        for val in h.values():
            if val > 1:
                result += val * (val - 1) // 2
        return (result)