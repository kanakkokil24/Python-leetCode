315. Count of Smaller Numbers After Self

You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

 

Example 1:

Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Example 2:

Input: nums = [-1]
Output: [0]
Example 3:

Input: nums = [-1,-1]
Output: [0,0]


Solution 

class Solution:
    def countSmaller(self, nums: List[int]) -> List[int]:
        from sortedcontainers import SortedList
        sorted_list1 = SortedList(nums)
        #print(sorted_list1)
        stack = []
        for num in nums:
            i = sorted_list1.index(num)
            stack.append(i)
            sorted_list1.remove(num)
        return(stack)

import bisect
sorted_values=[]
out = []
print(nums[::-1])
for x in nums[::-1]:
    idx = bisect.bisect_right(sorted_values, x)
    print("idx {}".format(idx))
    sorted_values.insert(idx, x)
    out.append(idx)
#print(sorted_values)
print(out[::-1])